package au.edu.wehi.idsv;

import htsjdk.samtools.util.IOUtil;
import htsjdk.samtools.util.Log;
import htsjdk.samtools.util.ProgressLogger;
import htsjdk.variant.variantcontext.VariantContext;
import htsjdk.variant.variantcontext.writer.VariantContextWriter;
import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;
import htsjdk.variant.vcf.VCFHeader;

import java.io.Closeable;
import java.io.File;
import java.io.IOException;
import java.util.Iterator;
import java.util.List;
import java.util.PriorityQueue;

import picard.cmdline.Option;
import picard.cmdline.StandardOptionDefinitions;
import picard.cmdline.Usage;
import au.edu.wehi.idsv.vcf.VcfConstants;

import com.google.common.collect.Lists;

/**
 * Clusters evidence that supports a common breakpoint together
 * @author Daniel Cameron
 *
 */
public class ClusterEvidence extends CommandLineProgram {

    private static final String PROGRAM_VERSION = "0.1";

    // The following attributes define the command-line arguments
    @Usage
    public String USAGE = getStandardUsagePreamble() + "Calls breakpoints between the two given chromosomes" +
    		"based on the evidence provided" + PROGRAM_VERSION;
    @Option(doc = "Input BAM file.",
            optional = false,
            shortName = StandardOptionDefinitions.INPUT_SHORT_NAME)
    public File INPUT;
    @Option(doc = "Chromosome to process. This argument can be supplied twice to process interchromosomal",
            optional = true,
            shortName = "CHR")
    public List<String> CHROMSOME;
    @Option(doc = "Breakpoint calls in VCF format",
            optional = true,
            shortName= StandardOptionDefinitions.OUTPUT_SHORT_NAME)
    public File OUTPUT;
    @Option(doc="Reference used for alignment",
    		optional = false,
    		shortName=StandardOptionDefinitions.REFERENCE_SHORT_NAME)
    public File REFERENCE;
    @Option(doc = "Picard metrics file generated by ExtractEvidence",
            optional = true)
    public File METRICS = null;
    private Log log = Log.getInstance(ClusterEvidence.class);
    @Override
	protected int doWork() {
    	ProcessingContext processContext = null;
    	VariantContextWriter vcfWriter = null;
    	List<Closeable> closeList = Lists.newArrayList();
    	try {
    		if (METRICS == null) {
    			METRICS = FileNamingConvention.getMetrics(INPUT);
    		}
    		if (CHROMSOME == null) {
    			CHROMSOME = Lists.newArrayList();
    		}
    		if (OUTPUT == null) {
    			switch (CHROMSOME.size()) {
    			case 0:
    				OUTPUT = FileNamingConvention.getBreakpointVcf(INPUT);
    				break;
    			case 1:
    				OUTPUT = FileNamingConvention.getBreakpointlVcf(INPUT, CHROMSOME.get(0), CHROMSOME.get(0));
    				break;
    			case 2:
    				OUTPUT = FileNamingConvention.getBreakpointlVcf(INPUT, CHROMSOME.get(0), CHROMSOME.get(1));
    				break;
    			default:
    				throw new IllegalArgumentException("Chromosome count cannot be greater than 2");
    			}
    		}
    		IOUtil.assertFileIsReadable(REFERENCE);
    		IOUtil.assertFileIsReadable(METRICS);
    		IOUtil.assertFileIsWritable(OUTPUT);
    		
	    	processContext = getContext(REFERENCE, INPUT);
			
			// TODO: add filtering parameters so we only process evidence between 1 and 2 
			// (@see DirectedEvidenceChromosomePairFilter)
			EvidenceClusterProcessor processor;
			log.info("Loading minimal evidence set");
			if (CHROMSOME.size() == 0) {
				processor = new EvidenceClusterProcessor(processContext);
				DirectedEvidenceFileIterator defi = allEvidence(processContext);
				closeList.add(defi);
				addEvidence(processor, defi);
			} else if (CHROMSOME.size() == 1) {
				processor = new EvidenceClusterSubsetProcessor(processContext, processContext.getDictionary().getSequenceIndex(CHROMSOME.get(0)), processContext.getDictionary().getSequenceIndex(CHROMSOME.get(0)));
				DirectedEvidenceFileIterator defi = evidenceForChr(processContext, CHROMSOME.get(0));
				closeList.add(defi);
				addEvidence(processor, defi);
			} else if (CHROMSOME.size() == 2) {
				processor = new EvidenceClusterSubsetProcessor(processContext, processContext.getDictionary().getSequenceIndex(CHROMSOME.get(0)), processContext.getDictionary().getSequenceIndex(CHROMSOME.get(1)));
				DirectedEvidenceFileIterator defi1 = evidenceForChr(processContext, CHROMSOME.get(0));
				closeList.add(defi1);
				addEvidence(processor, defi1);
				DirectedEvidenceFileIterator defi2 = evidenceForChr(processContext, CHROMSOME.get(1));
				closeList.add(defi2);
				addEvidence(processor, defi2);
			} else {
				throw new RuntimeException("CHROMSOME argument supplied too many times");
			}
			log.info("Calling maximal cliques");
			final ProgressLogger writeProgress = new ProgressLogger(log);
			vcfWriter = new VariantContextWriterBuilder()
				.setOutputFile(OUTPUT)
				.setReferenceDictionary(processContext.getDictionary())
				.build();
			final VCFHeader vcfHeader = new VCFHeader();
			vcfHeader.setSequenceDictionary(processContext.getDictionary());
			VcfConstants.addHeaders(vcfHeader);
			vcfWriter.writeHeader(vcfHeader);
			
			// Write out both sides of the breakend in order
			// since the first breakend is always the lower genomic coordinate
			// this will result in in-order output
			PriorityQueue<BreakpointSummary> highEnd = new PriorityQueue<BreakpointSummary>(1024, BreakendSummary.ByStartEnd);
			Iterator<BreakpointSummary> it = processor.iterator();
			while (it.hasNext()) {
				BreakendSummary loc = it.next();
				if (loc instanceof BreakpointSummary) {
					// Add the remote side of the call
					highEnd.add(((BreakpointSummary)loc).remoteBreakpoint());
				}
				while (!highEnd.isEmpty() && BreakendSummary.ByStartEnd.compare(highEnd.peek(), loc) < 0) {
					// write remote calls that are before here
					writeCall(processContext, vcfWriter, highEnd.poll(), writeProgress);
				}
				// write call
				writeCall(processContext, vcfWriter, loc, writeProgress);
			}
			// flush out the remote calls that we haven't written yet
			while (!highEnd.isEmpty()) {
				writeCall(processContext, vcfWriter, highEnd.poll(), writeProgress);
			}
    	} catch (IOException e) {
    		log.error(e);
    		throw new RuntimeException(e);
    	} finally {
    		try {
    			if (processContext != null) processContext.close();
    			if (vcfWriter != null) vcfWriter.close();
    			for (Closeable c : closeList) if (c != null) c.close();
    		} catch (IOException ee) {
        		log.error(ee);
        		throw new RuntimeException(ee);
    		}
    	}
        return 0;
    }
	private void writeCall(final ProcessingContext processContext,
			final VariantContextWriter vcfWriter, BreakendSummary loc, ProgressLogger progress) {
		VariantContextDirectedBreakpointBuilder builder = new VariantContextDirectedBreakpointBuilder(processContext)
			.breakend(loc, null)
			.evidence(loc.evidence);
		// Issue: we've lost all our extended info including the untemplated sequence
		VariantContext vc = builder.make(); 
		vcfWriter.add(vc);
		progress.record(vc.getChr(), vc.getStart());
	}
    private static void addEvidence(EvidenceClusterProcessor processor, DirectedEvidenceFileIterator evidence) {
    	while (evidence.hasNext()) {
			processor.addEvidence(evidence.next());
		}
    	evidence.close();
    }
	private DirectedEvidenceFileIterator evidenceForChr(final ProcessingContext processContext, final String chr) throws IOException {
		final DirectedEvidenceFileIterator dei1 = new DirectedEvidenceFileIterator(
				processContext,
				getSamReaderFactory(),
				ensureFileExists(FileNamingConvention.getSVBamForChr(INPUT, chr)),
				ensureFileExists(FileNamingConvention.getMateBamForChr(INPUT, chr)),
				ensureFileExists(FileNamingConvention.getRealignmentBamForChr(INPUT, chr)),
				ensureFileExists(FileNamingConvention.getBreakendVcfForChr(INPUT, chr)));
		return dei1;
	}
	private DirectedEvidenceFileIterator allEvidence(final ProcessingContext processContext) throws IOException {
		final DirectedEvidenceFileIterator dei1 = new DirectedEvidenceFileIterator(
				processContext,
				getSamReaderFactory(),
				ensureFileExists(FileNamingConvention.getSVBam(INPUT)),
				ensureFileExists(FileNamingConvention.getMateBam(INPUT)),
				ensureFileExists(FileNamingConvention.getRealignmentBam(INPUT)),
				ensureFileExists(FileNamingConvention.getBreakendVcf(INPUT)));
		return dei1;
	}
	public static void main(String[] argv) {
        System.exit(new ClusterEvidence().instanceMain(argv));
    }
}