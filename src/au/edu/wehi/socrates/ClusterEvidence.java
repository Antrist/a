package au.edu.wehi.socrates;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Iterator;
import java.util.PriorityQueue;
import java.util.SortedSet;

import picard.cmdline.Option;
import picard.cmdline.StandardOptionDefinitions;
import picard.cmdline.Usage;
import htsjdk.samtools.util.IOUtil;
import htsjdk.samtools.reference.ReferenceSequenceFile;
import htsjdk.samtools.reference.ReferenceSequenceFileFactory;
import htsjdk.samtools.util.Log;
import htsjdk.samtools.util.ProgressLogger;
import htsjdk.samtools.SAMFileHeader;
import htsjdk.samtools.SAMRecord;
import htsjdk.samtools.SAMSequenceDictionary;

import htsjdk.variant.variantcontext.VariantContext;
import htsjdk.variant.variantcontext.writer.VariantContextWriter;
import htsjdk.variant.variantcontext.writer.VariantContextWriterBuilder;
import htsjdk.variant.vcf.VCFFileReader;
import htsjdk.variant.vcf.VCFHeader;

import com.google.common.collect.Iterators;
import com.google.common.collect.PeekingIterator;
import com.google.common.collect.Sets;

import au.edu.wehi.socrates.vcf.VcfConstants;

/**
 * Clusters evidence that supports a common breakpoint together
 * @author Daniel Cameron
 *
 */
public class ClusterEvidence extends CommandLineProgram {

    private static final String PROGRAM_VERSION = "0.1";

    // The following attributes define the command-line arguments
    @Usage
    public String USAGE = getStandardUsagePreamble() + "Calls breakpoints between the two given chromosomes" +
    		"based on the evidence provided" + PROGRAM_VERSION;
    @Option(doc = "Input BAM file.",
            optional = false,
            shortName = StandardOptionDefinitions.INPUT_SHORT_NAME)
    public File INPUT;
    @Option(doc = "Chromosome to process. This argument can be supplied twice to process interchromosomal",
            optional = true,
            shortName = "CHR")
    public String[] CHROMSOME;
    @Option(doc = "Breakpoint calls in VCF format",
            optional = true,
            shortName= StandardOptionDefinitions.OUTPUT_SHORT_NAME)
    public File OUTPUT;
    @Option(doc="Reference used for alignment",
    		shortName=StandardOptionDefinitions.REFERENCE_SHORT_NAME)
    public File REFERENCE;
    @Option(doc = "Picard metrics file generated by ExtractEvidence",
            optional = true)
    public File METRICS = null;
    private Log log = Log.getInstance(ClusterEvidence.class);
    @Override
	protected int doWork() {
    	try {
    		if (METRICS == null) {
    			METRICS = FileNamingConvention.getMetrics(INPUT);
    		}
    		if (OUTPUT == null && CHROMSOME.length == 2) {
    			OUTPUT = FileNamingConvention.getBreakpointVcf(INPUT, CHROMSOME[0], CHROMSOME[1]);
    		}
    		IOUtil.assertFileIsReadable(REFERENCE);
    		IOUtil.assertFileIsReadable(METRICS);
    		IOUtil.assertFileIsWritable(OUTPUT);
    		
	    	final RelevantMetrics metrics = new RelevantMetrics(METRICS);
	    	final ReferenceSequenceFile reference = ReferenceSequenceFileFactory.getReferenceSequenceFile(REFERENCE);
	    	final ProcessingContext processContext = new ProcessingContext(reference, metrics);
	    	
	    	final ProgressLogger progress = new ProgressLogger(log);
			
			// TODO: add filtering parameters so we only process evidence between 1 and 2 
			// (@see DirectedEvidenceChromosomePairFilter)
			EvidenceClusterProcessor processor;
			log.debug("Loading minimal evidence set");
			if (CHROMSOME.length == 0) {
				processor = new EvidenceClusterProcessor(processContext);
				addEvidence(processor, allEvidence(processContext));
			} else if (CHROMSOME.length == 1) {
				processor = new EvidenceClusterSubsetProcessor(processContext, processContext.getDictionary().getSequenceIndex(CHROMSOME[0]), processContext.getDictionary().getSequenceIndex(CHROMSOME[0]));
				addEvidence(processor, evidenceForChr(processContext, CHROMSOME[0]));
			} else if (CHROMSOME.length == 2) {
				processor = new EvidenceClusterSubsetProcessor(processContext, processContext.getDictionary().getSequenceIndex(CHROMSOME[0]), processContext.getDictionary().getSequenceIndex(CHROMSOME[1]));
				addEvidence(processor, evidenceForChr(processContext, CHROMSOME[0]));
				addEvidence(processor, evidenceForChr(processContext, CHROMSOME[1]));
			} else {
				throw new RuntimeException("CHROMSOME argument supplied too many times");
			}
			log.debug("Calling maximal cliques");
			final VariantContextWriter vcfWriter = new VariantContextWriterBuilder()
				.setOutputFile(OUTPUT)
				.setReferenceDictionary(processContext.getDictionary())
				.build();
			final VCFHeader vcfHeader = new VCFHeader();
			VcfConstants.addHeaders(vcfHeader);
			vcfWriter.writeHeader(vcfHeader);
			Iterator<BreakendSummary> it = processor.iterator();
			while (it.hasNext()) {
				BreakendSummary loc = it.next();
				VariantContextDirectedBreakpointBuilder builder = new VariantContextDirectedBreakpointBuilder(processContext)
					.breakend(loc, null)
					.evidence(loc.evidence);
				// Issue: we've lost all our extended info including the untemplated sequence
				vcfWriter.add(builder.make());
			}
			vcfWriter.close();
    	} catch (IOException e) {
    		log.error(e);
    		throw new RuntimeException(e);
    	}
        return 0;
    }
    private static void addEvidence(EvidenceClusterProcessor processor, DirectedEvidenceFileIterator evidence) {
    	while (evidence.hasNext()) {
			processor.addEvidence(evidence.next());
		}
    	evidence.close();
    }
    private static File ensureFileExists(final File file) {
    	if (!file.exists()) {
    		throw new RuntimeException(String.format("Required file %s is missing. Has ExtractEvidence and GenerateDirectedBreakpoint been run? Have the directed breakpoints been realigned?", file));
    	}
    	return file;
    }
	private DirectedEvidenceFileIterator evidenceForChr(final ProcessingContext processContext, final String chr) throws IOException {
		final DirectedEvidenceFileIterator dei1 = new DirectedEvidenceFileIterator(
				processContext,
				getSamReaderFactory(),
				ensureFileExists(FileNamingConvention.getSVBamForChr(INPUT, chr)),
				ensureFileExists(FileNamingConvention.getMateBamForChr(INPUT, chr)),
				ensureFileExists(FileNamingConvention.getRealignmentBamForChr(INPUT, chr)),
				ensureFileExists(FileNamingConvention.getBreakendVcfForChr(INPUT, chr)));
		return dei1;
	}
	private DirectedEvidenceFileIterator allEvidence(final ProcessingContext processContext) throws IOException {
		final DirectedEvidenceFileIterator dei1 = new DirectedEvidenceFileIterator(
				processContext,
				getSamReaderFactory(),
				ensureFileExists(FileNamingConvention.getSVBam(INPUT)),
				ensureFileExists(FileNamingConvention.getMateBam(INPUT)),
				ensureFileExists(FileNamingConvention.getRealignmentBam(INPUT)),
				ensureFileExists(FileNamingConvention.getBreakendVcf(INPUT)));
		return dei1;
	}
	public static void main(String[] argv) {
        System.exit(new GenerateDirectedBreakpoints().instanceMain(argv));
    }
}