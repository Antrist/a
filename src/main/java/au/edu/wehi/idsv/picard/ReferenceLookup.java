package au.edu.wehi.idsv.picard;

import java.util.stream.IntStream;
import java.util.stream.Stream;

import htsjdk.samtools.QueryInterval;
import htsjdk.samtools.reference.ReferenceSequenceFile;

public interface ReferenceLookup extends ReferenceSequenceFile {
	public byte getBase(int referenceIndex, int position);
	/**
	 * Gets a list of intervals generated by splitting each contig
	 * into intervals of the given size
	 * @param intervalSize size of interval. The final interval of each sequence may be shorter than the given size.
	 * @return all intervals in the given
	 */
	default Stream<QueryInterval> getIntervals(final int intervalSize) {
		return getSequenceDictionary().getSequences().stream()
				.flatMap(contig -> {
					int referenceIndex = contig.getSequenceIndex();
					return IntStream.range(0, (int)Math.ceil((double)contig.getSequenceLength() / (double)intervalSize))
							.map(i -> 1 + i * intervalSize) // switch to 1-based genomic coordinates
							.mapToObj(start -> new QueryInterval(referenceIndex, start, start + intervalSize - 1));
				});
	}
}
